import heapq

# Define the goal state
goal_state = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

# Possible moves in terms of row, column shifts
moves = [
    (-1, 0),  # Up
    (1, 0),   # Down
    (0, -1),  # Left
    (0, 1)    # Right
]

class PuzzleNode:
    def __init__(self, state, parent=None, move=None, depth=0):
        self.state = state
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = depth + self.heuristic()

    def heuristic(self):
        """Compute the Manhattan distance from the current state to the goal state."""
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.state[i][j] != 0:
                    x, y = divmod(self.state[i][j] - 1, 3)
                    distance += abs(x - i) + abs(y - j)
        return distance

    def get_empty_tile_position(self):
        """Return the row, column position of the empty tile (0)."""
        for i in range(3):
            for j in range(3):
                if self.state[i][j] == 0:
                    return i, j

    def generate_successors(self):
        """Generate successor nodes by moving the empty tile in all possible directions."""
        successors = []
        empty_i, empty_j = self.get_empty_tile_position()
        for move_i, move_j in moves:
            new_i, new_j = empty_i + move_i, empty_j + move_j
            if 0 <= new_i < 3 and 0 <= new_j < 3:
                new_state = [row[:] for row in self.state]
                new_state[empty_i][empty_j], new_state[new_i][new_j] = new_state[new_i][new_j], new_state[empty_i][empty_j]
                successors.append(PuzzleNode(new_state, self, (move_i, move_j), self.depth + 1))
        return successors

    def __lt__(self, other):
        return self.cost < other.cost

def a_star_search(start_state):
    """Perform A* search to solve the 8-puzzle problem."""
    open_list = []
    closed_list = set()

    start_node = PuzzleNode(start_state)
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        if current_node.state == goal_state:
            return current_node

        closed_list.add(tuple(map(tuple, current_node.state)))

        for successor in current_node.generate_successors():
            if tuple(map(tuple, successor.state)) not in closed_list:
                heapq.heappush(open_list, successor)

    return None

def print_solution(solution_node):
    """Print the solution by tracing back the moves."""
    path = []
    current_node = solution_node
    while current_node.parent is not None:
        path.append(current_node.state)
        current_node = current_node.parent
    path.reverse()

    for state in path:
        for row in state:
            print(row)
        print()

# Example start state
start_state = [
    [1, 2, 3],
    [4, 0, 6],
    [7, 5, 8]
]

# Solve the puzzle
solution = a_star_search(start_state)

# Print the solution steps
if solution:
    print_solution(solution)
else:
    print("No solution found.")
